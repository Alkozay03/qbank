// Prisma 6.x
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // app uses pooler (6543)
  directUrl = env("DIRECT_URL")    // migrations use direct DB (5432)
}

enum Role {
  User
  Admin
}

enum QuizMode {
  RANDOM
  CUSTOM
  EXAM
}

/**
 * ----------------- NextAuth models -----------------
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(User)
  gradYear      Int?
  createdAt     DateTime  @default(now())

  // relations
  accounts Account[]
  sessions Session[]
  quizzes  Quiz[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ----------------- Domain models -----------------
 */
model Rotation {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[]

  @@index([name])
}

model Question {
  id          String   @id @default(cuid())
  rotationId  String
  stem        String
  explanation String?
  createdAt   DateTime @default(now())

  rotation Rotation   @relation(fields: [rotationId], references: [id], onDelete: Cascade)
  choices  Choice[]
  items    QuizItem[] // back-relation from QuizItem.question

  @@index([rotationId])
}

model Choice {
  id         String  @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean @default(false)

  question  Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses Response[] // back-relation from Response.choice

  @@index([questionId])
}

model Quiz {
  id        String   @id @default(cuid())
  userId    String
  mode      QuizMode
  count     Int
  settings  Json?
  createdAt DateTime @default(now())

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items QuizItem[] // back-relation from QuizItem.quiz

  @@index([userId])
}

model QuizItem {
  id         String @id @default(cuid())
  quizId     String
  questionId String // <-- REQUIRED
  order      Int?

  quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question  Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses Response[]

  @@index([quizId])
  @@index([questionId])
}

model Response {
  id         String   @id @default(cuid())
  quizItemId String
  choiceId   String?
  isCorrect  Boolean?
  createdAt  DateTime @default(now())

  quizItem QuizItem @relation(fields: [quizItemId], references: [id], onDelete: Cascade)
  choice   Choice?  @relation(fields: [choiceId], references: [id])

  @@index([quizItemId])
  @@index([choiceId])
}

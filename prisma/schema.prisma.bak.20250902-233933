generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
  MASTER_ADMIN
}

enum Rotation {
  PEDIATRICS
  INTERNAL_MEDICINE
  GENERAL_SURGERY
  OBSTETRICS_GYNECOLOGY
  PRE_CLINICAL
}

enum ScheduleItemType {
  HOSPITAL_SHIFT
  LECTURE
}

enum TagType {
  SUBJECT
  SYSTEM
  TOPIC
  ROTATION
  RESOURCE
  MODE
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  firstName     String?
  lastName      String?
  image         String?
  role          Role           @default(MEMBER)
  rotation      Rotation?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt

  accounts      Account[]
  sessions      Session[]

  quizzes       Quiz[]
  responses     Response[]     @relation("UserResponses")

  notifications Notification[] @relation("NotificationCreator")
  schedules     Schedule[]     @relation("ScheduleCreator")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          String       @id @default(cuid())
  customId    Int?         @unique
  text        String?
  explanation String?
  objective   String?

  answers     Answer[]
  quizItems   QuizItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt

  questionTags QuestionTag[]
}

model Answer {
  id         String   @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean  @default(false)

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        String     @id @default(cuid())
  userId    String
  status    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     QuizItem[]
}

model QuizItem {
  id         String   @id @default(cuid())
  quizId     String
  questionId String
  order      Int?
  marked     Boolean  @default(false)

  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Restrict)
  responses  Response[]
}

model Response {
  id         String   @id @default(cuid())
  quizItemId String
  userId     String?
  choiceId   String?
  isCorrect  Boolean?
  createdAt  DateTime @default(now())
  timeSeconds  Int?
  changeCount Int? @default(0)

  quizItem   QuizItem @relation(fields: [quizItemId], references: [id], onDelete: Cascade)
  user       User?    @relation("UserResponses", fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  type      TagType
  value     String
  questions QuestionTag[]

  @@unique([type, value])
}

model QuestionTag {
  questionId String
  tagId      String

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
}

model Notification {
  id         String   @id @default(cuid())
  shortId    Int      @unique
  title      String
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  createdById String?
  createdBy   User?    @relation("NotificationCreator", fields: [createdById], references: [id])
}

model Schedule {
  id           String         @id @default(cuid())
  title        String         @default("Week Schedule")
  weekStart    DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  createdById  String?
  createdBy    User?          @relation("ScheduleCreator", fields: [createdById], references: [id])

  items        ScheduleItem[]

  @@unique([weekStart])
}

model ScheduleItem {
  id          String           @id @default(cuid())
  scheduleId  String
  dayOfWeek   Int
  type        ScheduleItemType

  startsAt    DateTime
  endsAt      DateTime

  topic       String?
  tutor       String?
  location    String?
  link        String?

  schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId, dayOfWeek])
}